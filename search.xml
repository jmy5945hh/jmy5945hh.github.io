<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Ethereum以太坊智能合约部署源码分析</title>
      <link href="/2018/05/27/Ethereum%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <content type="html"><![CDATA[<h1 id="Ethereum-&#x4EE5;&#x592A;&#x574A;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x90E8;&#x7F72;&#x6E90;&#x7801;&#x5206;&#x6790;"><a href="#Ethereum-&#x4EE5;&#x592A;&#x574A;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x90E8;&#x7F72;&#x6E90;&#x7801;&#x5206;&#x6790;" class="headerlink" title="Ethereum &#x4EE5;&#x592A;&#x574A;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x90E8;&#x7F72;&#x6E90;&#x7801;&#x5206;&#x6790;"></a>Ethereum &#x4EE5;&#x592A;&#x574A;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x90E8;&#x7F72;&#x6E90;&#x7801;&#x5206;&#x6790;</h1><h2 id="0-&#x524D;&#x8A00;"><a href="#0-&#x524D;&#x8A00;" class="headerlink" title="0 &#x524D;&#x8A00;"></a>0 &#x524D;&#x8A00;</h2><ul><li>&#x57FA;&#x4E8E; Ethereum Coffice (v.1.8.8) &#x5206;&#x6790;</li><li>&#x9700;&#x8981;&#x533A;&#x5757;&#x94FE;&#x57FA;&#x7840;&#x77E5;&#x8BC6;</li><li>&#x6709; C++/JAVA &#x57FA;&#x7840;&#x5C31;&#x80FD;&#x7406;&#x89E3;&#x6587;&#x4E2D; go &#x4EE3;&#x7801;</li><li>&#x672C;&#x6587;<strong>&#x4E0D;&#x5305;&#x542B;</strong>&#x5408;&#x7EA6;&#x90E8;&#x7F72;&#x7684;&#x524D;&#x5E8F;&#x6B65;&#x9AA4;&#xFF0C;&#x5373;sol&#x6E90;&#x7801;&#x7F16;&#x8BD1;&#x6253;&#x5305;&#x8FC7;&#x7A0B;&#xFF0C;&#x8BF7;&#x53C2;&#x8003;&#x7F51;&#x7EDC;&#x4E0A;&#x5176;&#x4ED6;&#x6587;&#x7AE0;</li><li>&#x6D41;&#x7A0B;&#x56FE;&#x4F7F;&#x7528; <a href="https://www.processon.com" target="_blank" rel="noopener">ProcessOn.com</a> &#x5728;&#x7EBF;&#x7ED8;&#x5236;  </li></ul><hr><p><strong>&#x6574;&#x4F53;&#x6D41;&#x7A0B;&#x56FE;&#x5982;&#x4E0B;&#x6240;&#x793A;</strong>&#xFF1A;<br><img src="https://github.com/jmy5945hh/jmy5945hh.github.io/blob/master/2018/05/27/Ethereumä»¥å¤ªåæºè½åçº¦é¨ç½²æºç åæ/EthereumDeploy.jpg?raw=true" alt="image"></p><a id="more"></a><h2 id="1-API-&#x53D1;&#x8D77;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x90E8;&#x7F72;&#x4EA4;&#x6613;"><a href="#1-API-&#x53D1;&#x8D77;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x90E8;&#x7F72;&#x4EA4;&#x6613;" class="headerlink" title="1 API &#x53D1;&#x8D77;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x90E8;&#x7F72;&#x4EA4;&#x6613;"></a>1 API &#x53D1;&#x8D77;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x90E8;&#x7F72;&#x4EA4;&#x6613;</h2><p>&#x5BF9;&#x4E8E; Ethereum &#x533A;&#x5757;&#x94FE;&#x7F51;&#x7EDC;&#x6765;&#x8BF4;&#xFF0C;&#x667A;&#x80FD;&#x5408;&#x7EA6;&#x7684;&#x90E8;&#x7F72;&#x662F;&#x4EE5;&#x4EA4;&#x6613;&#x7684;&#x5F62;&#x5F0F;&#x8FDB;&#x884C;&#x7684;&#xFF0C;&#x8BE5;&#x7B14;&#x4EA4;&#x6613;&#x7684;&#x7279;&#x6B8A;&#x4E4B;&#x5904;&#x5728;&#x4E8E;&#x6CA1;&#x6709;&#x63A5;&#x6536;&#x65B9;&#xFF08;To == nil&#xFF09;&#x3002;&#x4E0B;&#x9762;&#x662F;&#x4EA4;&#x6613;&#x53D1;&#x8D77;&#x8FC7;&#x7A0B;&#x7528;&#x5230;&#x7684;&#x4E24;&#x4E2A;&#x4E3B;&#x8981;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF1A;  </p><h3 id="1-1-&#x76F8;&#x5173;&#x6570;&#x636E;&#x7ED3;&#x6784;"><a href="#1-1-&#x76F8;&#x5173;&#x6570;&#x636E;&#x7ED3;&#x6784;" class="headerlink" title="1.1 &#x76F8;&#x5173;&#x6570;&#x636E;&#x7ED3;&#x6784;"></a>1.1 &#x76F8;&#x5173;&#x6570;&#x636E;&#x7ED3;&#x6784;</h3><ul><li><p>&#x5BA2;&#x6237;&#x7AEF;&#x4FA7;&#x4F20;&#x8F93;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5C55;&#x793A;&#xFF1A;</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file: ethapi\api.go</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> SendTxArgs <span class="keyword">struct</span> {</span><br><span class="line">    From     common.Address  <span class="string">`json:&quot;from&quot;`</span></span><br><span class="line">    To       *common.Address <span class="string">`json:&quot;to&quot;`</span></span><br><span class="line">    Gas      *hexutil.Uint64 <span class="string">`json:&quot;gas&quot;`</span></span><br><span class="line">    GasPrice *hexutil.Big    <span class="string">`json:&quot;gasPrice&quot;`</span></span><br><span class="line">    Value    *hexutil.Big    <span class="string">`json:&quot;value&quot;`</span></span><br><span class="line">    Nonce    *hexutil.Uint64 <span class="string">`json:&quot;nonce&quot;`</span></span><br><span class="line">    Data  *hexutil.Bytes <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">    Input *hexutil.Bytes <span class="string">`json:&quot;input&quot;`</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>Ethereum &#x4EA4;&#x6613;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5C55;&#x793A;&#xFF1A;</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file: core\types\transaction.go</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> Transaction <span class="keyword">struct</span> {</span><br><span class="line">    data txdata</span><br><span class="line">    hash atomic.Value</span><br><span class="line">    size atomic.Value</span><br><span class="line">    from atomic.Value</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> txdata <span class="keyword">struct</span> {</span><br><span class="line">    AccountNonce <span class="keyword">uint64</span>          <span class="string">`json:&quot;nonce&quot;    gencodec:&quot;required&quot;`</span></span><br><span class="line">    Price        *big.Int        <span class="string">`json:&quot;gasPrice&quot; gencodec:&quot;required&quot;`</span></span><br><span class="line">    GasLimit     <span class="keyword">uint64</span>          <span class="string">`json:&quot;gas&quot;      gencodec:&quot;required&quot;`</span></span><br><span class="line">    Recipient    *common.Address <span class="string">`json:&quot;to&quot;       rlp:&quot;nil&quot;`</span></span><br><span class="line">    Amount       *big.Int        <span class="string">`json:&quot;value&quot;    gencodec:&quot;required&quot;`</span></span><br><span class="line">    Payload      []<span class="keyword">byte</span>          <span class="string">`json:&quot;input&quot;    gencodec:&quot;required&quot;`</span></span><br><span class="line"></span><br><span class="line">    V *big.Int <span class="string">`json:&quot;v&quot; gencodec:&quot;required&quot;`</span></span><br><span class="line">    R *big.Int <span class="string">`json:&quot;r&quot; gencodec:&quot;required&quot;`</span></span><br><span class="line">    S *big.Int <span class="string">`json:&quot;s&quot; gencodec:&quot;required&quot;`</span></span><br><span class="line"></span><br><span class="line">    Hash *common.Hash <span class="string">`json:&quot;hash&quot; rlp:&quot;-&quot;`</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-&#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;"><a href="#1-2-&#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;" class="headerlink" title="1.2 &#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;"></a>1.2 &#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;</h3><ol><li><p><code>ethapi/api.go</code> &#x8BC6;&#x522B;&#x5230;&#x8FD9;&#x662F;&#x4E00;&#x6B21;&#x4EA4;&#x6613;&#x53D1;&#x9001;&#x8BF7;&#x6C42;&#xFF0C;&#x8C03;&#x7528; <code>SendTransaction()</code> &#x51FD;&#x6570;&#xFF0C;&#x8FDB;&#x4E00;&#x6B65;&#x5411;&#x5E95;&#x5C42;&#x53D1;&#x9001;&#x6D88;&#x606F;&#x3002;&#x9996;&#x5148;&#xFF0C;&#x51FD;&#x6570;&#x4F1A;&#x68C0;&#x67E5;&#x53D1;&#x9001;&#x4EA4;&#x6613;&#x8D26;&#x6237;&#x7684;&#x5408;&#x6CD5;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x4E3A;&#x4EA4;&#x6613;&#x8BBE;&#x7F6E;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x521D;&#x59CB;&#x503C;&#xFF0C;&#x4F8B;&#x5982; gas, nonce &#x7B49;&#x3002;&#x968F;&#x540E;&#xFF0C;&#x8BC6;&#x522B;&#x5230;&#x8FD9;&#x662F;&#x5408;&#x7EA6;&#x521B;&#x5EFA;&#xFF0C;&#x4F1A;&#x68C0;&#x67E5;&#x662F;&#x5426;&#x4F20;&#x5165;&#x4E86;&#x5408;&#x7EA6;&#x7801;&#x6D41;&#x6570;&#x636E;&#x3002;<br> 1a. &#x6839;&#x636E;&#x4F20;&#x5165;&#x4FE1;&#x606F;&#x521B;&#x5EFA; <code>Transaction</code> &#x3002;&#x6CE8;&#x610F;&#x6B64;&#x5904;&#x6709;&#x4E2A;&#x5224;&#x65AD;&#x8BED;&#x53E5;&#xFF0C;&#x6839;&#x636E; <code>To</code> &#x662F;&#x5426;&#x6709;&#x503C;&#x6765;&#x786E;&#x5B9A;&#x662F;&#x5408;&#x7EA6;&#x521B;&#x5EFA;&#x6216;&#x8C03;&#x7528;&#x3002;</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> args.To == <span class="literal">nil</span> {</span><br><span class="line">    <span class="keyword">return</span> types.NewContractCreation(...)</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p> 1b. <code>SignTx()</code> &#x4F7F;&#x7528;&#x4EA4;&#x6613;&#x53D1;&#x8D77;&#x8005;&#x4FE1;&#x606F;&#x5BF9;&#x4EA4;&#x6613;&#x8FDB;&#x884C;&#x7B7E;&#x540D;</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chainID *big.Int</span><br><span class="line"><span class="keyword">if</span> config := s.b.ChainConfig(); config.IsEIP155(s.b.CurrentBlock().Number()) {</span><br><span class="line">    chainID = config.ChainId</span><br><span class="line">}</span><br><span class="line">signed, err := wallet.SignTx(account, tx, chainID)</span><br></pre></td></tr></table></figure><p> 1c. <code>submitTransaction()</code> &#x5C06;&#x4EA4;&#x6613;&#x63A8;&#x8FDB;&#x4EA4;&#x6613;&#x6C60;&#xFF0C;&#x8C03;&#x7528; <code>crypto.CreateAddress()</code> &#x751F;&#x6210;&#x5408;&#x7EA6;&#x5730;&#x5740;&#x5E76;&#x8FD4;&#x56DE;&#x4EA4;&#x6613;Hash&#x3002;</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">submitTransaction</span><span class="params">(...)</span> <span class="params">(common.Hash, error)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> err := b.SendTx(ctx, tx); err != <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span> common.Hash{}, err</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> tx.To() == <span class="literal">nil</span> {</span><br><span class="line">        ...</span><br><span class="line">        addr := crypto.CreateAddress(from, tx.Nonce())</span><br><span class="line">        log.Info(... <span class="string">&quot;contract&quot;</span>, addr.Hex())</span><br><span class="line">    } </span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> tx.Hash(), <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p> &#x5165;&#x6C60;&#x64CD;&#x4F5C;&#x4F1A;&#x8C03;&#x7528;&#x5982;&#x4E0B;&#x5173;&#x952E;&#x51FD;&#x6570;&#x3002;&#x4EA4;&#x6613;&#x6C60;&#x5206;&#x4E3A;&#x4E24;&#x4E2A;&#x4EA4;&#x6613;&#x5217;&#x8868;&#xFF0C; <code>pending</code> &#x4E2D;&#x5B58;&#x653E;&#x53EF;&#x6267;&#x884C;&#x7684;&#x4EA4;&#x6613;&#xFF0C; <code>queue</code> &#x4E2D;&#x5B58;&#x653E;&#x6392;&#x961F;&#x4E2D;&#x6682;&#x4E0D;&#x53EF;&#x6267;&#x884C;&#x7684;&#x4EA4;&#x6613;&#xFF0C;&#x4ED6;&#x4EEC;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x76F8;&#x4E92;&#x8F6C;&#x6362;&#x3002;&#x5165;&#x6C60;&#x4E4B;&#x524D;&#xFF0C;<code>pool.validateTx()</code> &#x4F1A;&#x5BF9;&#x4EA4;&#x6613;&#x7B7E;&#x540D;&#x8FDB;&#x884C;&#x521D;&#x6B65;&#x68C0;&#x67E5;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E00;&#x7B14;&#x5408;&#x6CD5;&#x7684;&#x65B0;&#x4EA4;&#x6613;&#xFF0C; <code>pool.enqueueTx()</code> &#x4F1A;&#x5C06;&#x5176;&#x5148;&#x653E;&#x5165; <code>queue</code> &#x5217;&#x8868;&#xFF0C;&#x968F;&#x540E; <code>promoteExecutables()</code> &#x89C6;&#x6761;&#x4EF6;&#x5C06;&#x5176;&#x79FB;&#x5165; <code>pending</code> &#x4E2D;&#x3002;</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file: core\tx_pool.go</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pool *TxPool)</span> <span class="title">addTx</span><span class="params">(...)</span> <span class="title">error</span></span> {</span><br><span class="line">    ...</span><br><span class="line">    replace, err := pool.add(tx, local)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !replace {</span><br><span class="line">        from, _ := types.Sender(pool.signer, tx) </span><br><span class="line">        pool.promoteExecutables([]common.Address{from})</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-Worker-&#x4EA4;&#x6613;&#x6253;&#x5305;&#x51FA;&#x5757;"><a href="#2-Worker-&#x4EA4;&#x6613;&#x6253;&#x5305;&#x51FA;&#x5757;" class="headerlink" title="2 Worker &#x4EA4;&#x6613;&#x6253;&#x5305;&#x51FA;&#x5757;"></a>2 Worker &#x4EA4;&#x6613;&#x6253;&#x5305;&#x51FA;&#x5757;</h2><p>&#x968F;&#x7740;&#x4EA4;&#x6613;&#x6C60;&#x7684;&#x589E;&#x957F;&#xFF0C;&#x77FF;&#x5DE5;&#x670D;&#x52A1;&#x6839;&#x636E;&#x4E00;&#x5B9A;&#x7684;&#x6761;&#x4EF6;&#x5B8C;&#x6210;&#x4EA4;&#x6613;&#x6253;&#x5305;&#x4E0E;&#x51FA;&#x5757;&#x64CD;&#x4F5C;&#x3002;&#x751F;&#x6210;&#x7684;&#x5757;&#x5C06;&#x5728;&#x7F51;&#x7EDC;&#x4E2D;&#x901A;&#x8FC7;P2P&#x670D;&#x52A1;&#x4F20;&#x64AD;&#x3002;<br>(&#x7EC6;&#x8282;&#x5F85;&#x5B8C;&#x6210;)</p><h2 id="3-Blockchain-&#x533A;&#x5757;&#x4E0A;&#x94FE;"><a href="#3-Blockchain-&#x533A;&#x5757;&#x4E0A;&#x94FE;" class="headerlink" title="3 Blockchain &#x533A;&#x5757;&#x4E0A;&#x94FE;"></a>3 Blockchain &#x533A;&#x5757;&#x4E0A;&#x94FE;</h2><h3 id="3-1-&#x6982;&#x8FF0;"><a href="#3-1-&#x6982;&#x8FF0;" class="headerlink" title="3.1 &#x6982;&#x8FF0;"></a>3.1 &#x6982;&#x8FF0;</h3><p>&#x5728;&#x6536;&#x5230;&#x7F51;&#x7EDC;&#x4E0A;&#x7684;&#x4F20;&#x9001;&#x6765;&#x7684;&#x533A;&#x5757;&#x540E;&#xFF0C;&#x89E6;&#x53D1; <code>blockchain.go</code> &#x7684; <code>InsertChain()</code> &#x51FD;&#x6570;&#xFF0C;&#x8FDB;&#x5165;&#x533A;&#x5757;&#x7684;&#x5904;&#x7406;&#x8FC7;&#x7A0B;: <strong><em>&#x533A;&#x5757;&#x94FE;&#x6821;&#x9A8C; -&gt; &#x533A;&#x5757;&#x5934;&#x9A8C;&#x8BC1;-&gt;&#x533A;&#x5757;&#x4F53;&#x9A8C;&#x8BC1;-&gt;&#x4EA4;&#x6613;&#x5904;&#x7406;-&gt;&#x72B6;&#x6001;&#x9A8C;&#x8BC1;-&gt;&#x533A;&#x5757;&#x4E0A;&#x94FE;</em></strong>&#x3002;<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file: core\blockchain.go</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span> <span class="title">insertChain</span><span class="params">(chain types.Blocks)</span> <span class="params">(...)</span></span> {</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(chain); i++ {</span><br><span class="line">        <span class="keyword">if</span> chain[i].NumberU64() != chain[i<span class="number">-1</span>].NumberU64()+<span class="number">1</span> || chain[i].ParentHash() != chain[i<span class="number">-1</span>].Hash() {</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, ...</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">    abort, results := bc.engine.VerifyHeaders(...)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> i, block := <span class="keyword">range</span> chain {</span><br><span class="line">        ...</span><br><span class="line">        err := &lt;-results</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> {</span><br><span class="line">            err = bc.Validator().ValidateBody(block)</span><br><span class="line">        }</span><br><span class="line">        ...</span><br><span class="line">        state, err := state.New(parent.Root(), bc.stateCache)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            <span class="keyword">return</span> i, events, coalescedLogs, err</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        receipts, logs, usedGas, err := bc.processor.Process(...)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            bc.reportBlock(block, receipts, err)</span><br><span class="line">            <span class="keyword">return</span> i, events, coalescedLogs, err</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        err = bc.Validator().ValidateState(...)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            bc.reportBlock(block, receipts, err)</span><br><span class="line">            <span class="keyword">return</span> i, events, coalescedLogs, err</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        status, err := bc.WriteBlockWithState(...)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            <span class="keyword">return</span> i, events, coalescedLogs, err</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">switch</span> status {</span><br><span class="line">        <span class="keyword">case</span> CanonStatTy:</span><br><span class="line">            ...</span><br><span class="line">        <span class="keyword">case</span> SideStatTy:</span><br><span class="line">            ...</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>, events, coalescedLogs, <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><ul><li>Message &#x6570;&#x636E;&#x7ED3;&#x6784;&#x5C55;&#x793A;<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> {</span><br><span class="line">    to         *common.Address</span><br><span class="line">    from       common.Address</span><br><span class="line">    nonce      <span class="keyword">uint64</span></span><br><span class="line">    amount     *big.Int</span><br><span class="line">    gasLimit   <span class="keyword">uint64</span></span><br><span class="line">    gasPrice   *big.Int</span><br><span class="line">    data       []<span class="keyword">byte</span></span><br><span class="line">    checkNonce <span class="keyword">bool</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2-&#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;"><a href="#3-2-&#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;" class="headerlink" title="3.2 &#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;"></a>3.2 &#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;</h3><ol start="2"><li>&#x4EA4;&#x6613;&#x5904;&#x7406;&#x8FC7;&#x7A0B;&#x8C03;&#x7528; <code>state_processer.go</code> &#x7684; <code>Process()</code> &#x51FD;&#x6570;&#x5BF9;&#x533A;&#x5757;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x4EA4;&#x6613;&#x8FDB;&#x884C;&#x9010;&#x4E00;&#x5904;&#x7406;&#x3002;<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file: core\state_processor.go</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *StateProcessor)</span> <span class="title">Process</span><span class="params">(...)</span> <span class="params">(types.Receipts, []*types.Log, <span class="keyword">uint64</span>, error)</span></span> {</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> i, tx := <span class="keyword">range</span> block.Transactions() {</span><br><span class="line">        statedb.Prepare(tx.Hash(), block.Hash(), i)</span><br><span class="line">        receipt, _, err := ApplyTransaction(...)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="number">0</span>, err</span><br><span class="line">        }</span><br><span class="line">        receipts = <span class="built_in">append</span>(receipts, receipt)</span><br><span class="line">        allLogs = <span class="built_in">append</span>(allLogs, receipt.Logs...)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    p.engine.Finalize(...)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> receipts, allLogs, *usedGas, <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ol><p>2a. <code>AsMessage()</code> &#x51FD;&#x6570;&#x5C06; <code>Transaction</code> &#x6570;&#x636E;&#x7ED3;&#x6784;&#x8F6C;&#x6362;&#x4E3A; <code>Message</code> &#x6570;&#x636E;&#x7ED3;&#x6784;<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msg, err := tx.AsMessage(types.MakeSigner(config, header.Number))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="number">0</span>, err</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><p>2b. <code>newEvm()</code> &#x4E3A;&#x5408;&#x7EA6;&#x7684;&#x6267;&#x884C;&#x521B;&#x5EFA;&#x865A;&#x62DF;&#x673A;&#x73AF;&#x5883;&#x3002;<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context := NewEVMContext(msg, header, bc, author)</span><br><span class="line">vmenv := vm.NewEVM(context, statedb, config, cfg)</span><br></pre></td></tr></table></figure></p><p>2c. <code>ApplyMessage()</code> &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x72B6;&#x6001;&#x53D8;&#x66F4;&#x5B9E;&#x4F8B;&#xFF0C;&#x5E76;&#x4E14;&#x8C03;&#x7528; <code>state_transition.go</code> &#x7684; <code>TransitionDb()</code> &#x51FD;&#x6570;&#x5E94;&#x7528;&#x5408;&#x7EA6;&#x4EE3;&#x7801;&#x5230;&#x8FD9;&#x4E2A;&#x5B9E;&#x4F8B;&#x4E2D;&#xFF0C;&#x53D1;&#x751F;&#x5B9E;&#x8D28;&#x4E0A;&#x7684;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x8BB0;&#x5F55;&#x3002; <code>TransitionDb()</code> &#x9996;&#x5148;&#x4F1A;&#x8FDB;&#x884C;&#x4EA4;&#x6613;&#x6267;&#x884C;&#x7684;&#x5165;&#x53E3;&#x68C0;&#x67E5;&#xFF0C;&#x786E;&#x8BA4; nonce, gas &#x662F;&#x5426;&#x5408;&#x6CD5;&#x53EF;&#x7528;&#xFF1B;&#x968F;&#x540E;&#x6839;&#x636E;&#x662F;&#x5408;&#x7EA6;&#x521B;&#x5EFA;&#x8FD8;&#x662F;&#x5408;&#x7EA6;&#x8C03;&#x7528;&#xFF0C;&#x9009;&#x62E9; <code>Create()</code> &#x6216;&#x8005; <code>Call()</code>&#xFF0C;&#x5728;&#x5408;&#x7EA6;&#x90E8;&#x7F72;&#x4E2D;&#xFF0C;&#x6B64;&#x5904;&#x4F1A;&#x8C03;&#x7528; <code>Create()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file: core\state_transition.go</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(st *StateTransition)</span> <span class="title">TransitionDb</span><span class="params">()</span> <span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">if</span> err = st.preCheck(); err != <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">    contractCreation := msg.To() == <span class="literal">nil</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> contractCreation {</span><br><span class="line">        ret, _, st.gas, vmerr = evm.Create(...)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        st.state.SetNonce(msg.From(), st.state.GetNonce(sender.Address())+<span class="number">1</span>)</span><br><span class="line">        ret, st.gas, vmerr = evm.Call(...)</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> ret, st.gasUsed(), vmerr != <span class="literal">nil</span>, err</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x4E0B;&#x9762;&#x8FDB;&#x5165;&#x5230;&#x5408;&#x7EA6;&#x521B;&#x5EFA;<strong>&#x6700;&#x6838;&#x5FC3;&#x7684;&#x6D41;&#x7A0B;</strong>&#xFF0C;&#x7531; <code>core\vm\evm.go</code> &#x7684; <code>Create()</code> &#x5B8C;&#x6210;&#x3002;&#x9996;&#x5148;&#xFF0C;&#x4E3A;&#x65B0;&#x5408;&#x7EA6;&#x521B;&#x5EFA;&#x5730;&#x5740;&#xFF1B;&#x57FA;&#x4E8E;&#x8FD9;&#x4E2A;&#x5408;&#x7EA6;&#x5730;&#x5740;&#xFF0C;&#x4F1A;&#x7ED1;&#x5B9A;&#x4E00;&#x4E2A;&#x8D26;&#x6237;&#xFF0C;&#x968F;&#x540E;&#x4F1A;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x4EE5;&#x592A;&#x5E01;&#x7684;&#x8F6C;&#x8D26;&#x64CD;&#x4F5C;&#x3002;<code>run()</code> &#x51FD;&#x6570;&#x5C06;&#x6267;&#x884C;&#x5408;&#x7EA6;&#x4EE3;&#x7801;&#xFF0C;&#x7B2C;&#x4E09;&#x4E2A;&#x53C2;&#x6570;&#x4E3A;nil&#xFF0C;&#x4EE3;&#x8868;&#x4E0D;&#x8C03;&#x7528;&#x5408;&#x7EA6;&#x4E2D;&#x7684;&#x4EFB;&#x4F55;&#x51FD;&#x6570;&#xFF0C;&#x53EA;&#x662F;&#x521D;&#x59CB;&#x5316;&#x3002;</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file: core\vm\evm.go</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(evm *EVM)</span> <span class="title">Create</span><span class="params">(...)</span> <span class="params">(...)</span></span> {</span><br><span class="line">    ...</span><br><span class="line">    contractAddr = crypto.CreateAddress(caller.Address(), nonce)</span><br><span class="line">    ...</span><br><span class="line">    evm.StateDB.CreateAccount(contractAddr)</span><br><span class="line">    ...</span><br><span class="line">    evm.Transfer(evm.StateDB, caller.Address(), contractAddr, value)</span><br><span class="line"></span><br><span class="line">    contract := NewContract(caller, AccountRef(contractAddr), value, gas)</span><br><span class="line">    contract.SetCallCode(&amp;contractAddr, crypto.Keccak256Hash(code), code)</span><br><span class="line">    ...</span><br><span class="line">    ret, err = run(evm, contract, <span class="literal">nil</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> ret, contractAddr, contract.Gas, err</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="3"><li><code>blockchain.go</code> &#x7684; <code>WriteBlockWithState()</code> &#x5C06;&#x6389;&#x7528; <code>accessors_chain.go</code> &#x7684; 3a. <code>WriteBlock()</code> 3b. <code>WriteReceipts()</code> &#x5199;&#x5165;&#x533A;&#x5757;&#x548C;&#x6536;&#x636E;&#x3002;</li></ol><h2 id="4-API-&#x83B7;&#x53D6;&#x6536;&#x636E;"><a href="#4-API-&#x83B7;&#x53D6;&#x6536;&#x636E;" class="headerlink" title="4 API &#x83B7;&#x53D6;&#x6536;&#x636E;"></a>4 API &#x83B7;&#x53D6;&#x6536;&#x636E;</h2><h3 id="4-1-&#x6982;&#x8FF0;"><a href="#4-1-&#x6982;&#x8FF0;" class="headerlink" title="4.1 &#x6982;&#x8FF0;"></a>4.1 &#x6982;&#x8FF0;</h3><p>&#x5728;&#x4E0A;&#x9762;&#x7684;&#x6D41;&#x7A0B;&#x4E2D;&#xFF0C;&#x4EA4;&#x6613;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x540E;&#xFF0C;&#x4E0D;&#x4F1A;&#x663E;&#x5F0F;&#x5730;&#x5411;&#x8BF7;&#x6C42;&#x7AEF;&#x56DE;&#x590D;&#x4EFB;&#x4F55;&#x4EA4;&#x6613;&#x6267;&#x884C;&#x7684;&#x5177;&#x4F53;&#x60C5;&#x51B5;&#x3002;&#x5728; Ethereum &#x533A;&#x5757;&#x94FE;&#x7F51;&#x7EDC;&#x4E2D;&#xFF0C;&#x9700;&#x8981;&#x8BF7;&#x6C42;&#x7AEF;&#x663E;&#x5F0F;&#x5730;&#x8BF7;&#x6C42;&#x4EA4;&#x6613;&#x6536;&#x636E;&#xFF0C;&#x4EE5;&#x6B64;&#x6765;&#x786E;&#x8BA4;&#x4EA4;&#x6613;&#x6267;&#x884C;&#x7684;&#x60C5;&#x51B5;&#x3002;&#x4ECE;&#x4E0A;&#x4E00;&#x8282;&#x7684;&#x7B2C;3&#x6B65;&#x9AA4;&#x53EF;&#x77E5;&#xFF0C;&#x4EA4;&#x6613;&#x6267;&#x884C;&#x6536;&#x636E;&#x5DF2;&#x7ECF;&#x5199;&#x5165;&#x4E86;db&#x4E2D;&#xFF0C;&#x8BF7;&#x6C42;&#x7AEF;&#x8981;&#x505A;&#x7684;&#x662F;&#x53D1;&#x751F;&#x83B7;&#x53D6;&#x4EA4;&#x6613;&#x6536;&#x636E;&#x8BF7;&#x6C42;&#x3002;</p><h3 id="4-2-&#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;"><a href="#4-2-&#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;" class="headerlink" title="4.2 &#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;"></a>4.2 &#x6D41;&#x7A0B;&#x56FE;&#x7EC6;&#x8282;</h3><ol start="4"><li><code>ethapi/api.go</code> &#x8BC6;&#x522B;&#x5230;&#x8FD9;&#x662F;&#x4E00;&#x6B21;&#x4EA4;&#x6613;&#x53D1;&#x9001;&#x8BF7;&#x6C42;&#xFF0C;&#x8C03;&#x7528; <code>GetTransactionReceipt()</code> &#x51FD;&#x6570;&#xFF0C;&#x8FDB;&#x4E00;&#x6B65;&#x5411;&#x5E95;&#x5C42;&#x53D1;&#x9001;&#x6D88;&#x606F;&#x3002;&#x5982;&#x679C;&#x6536;&#x636E;&#x4E2D;&#x7684;&#x5408;&#x7EA6;&#x5730;&#x5740;&#x4E0D;&#x662F;&#x5168;0&#xFF0C;&#x5219;&#x8BA4;&#x4E3A;&#x662F;&#x4E00;&#x6B21;&#x5408;&#x7EA6;&#x90E8;&#x7F72;&#x8FC7;&#x7A0B;&#xFF0C;&#x586B;&#x5199;&#x4EA4;&#x6613;&#x4E2D;&#x7684;&#x5408;&#x7EA6;&#x5730;&#x5740;&#x5230;&#x6536;&#x636E;&#x4E2D;&#x4F9B;&#x8BF7;&#x6C42;&#x7AEF;&#x4F7F;&#x7528;&#x3002;<br> 4a. &#x8C03;&#x7528;<code>ReadTransaction()</code> &#x51FD;&#x6570;&#xFF0C;&#x83B7;&#x53D6;&#x4EA4;&#x6613;&#x7684;&#x57FA;&#x7840;&#x4FE1;&#x606F;<br> 4b. &#x8C03;&#x7528;<code>GetReceipts()</code> &#x51FD;&#x6570;&#xFF0C;&#x83B7;&#x53D6;&#x4EA4;&#x6613;&#x6536;&#x636E;&#xFF0C;&#x5176;&#x5185;&#x90E8;&#x4F1A;&#x8C03;&#x7528; <code>ReadHeadNumber()</code> &#x548C; <code>ReadReceipts()</code> &#x51FD;&#x6570;&#x8F85;&#x52A9;&#x64CD;&#x4F5C;&#x3002;<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file: ethapi/api.go</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *PublicTransactionPoolAPI)</span> <span class="title">GetTransactionReceipt</span><span class="params">(...)</span> <span class="params">(...)</span></span> {</span><br><span class="line">    tx, blockHash, blockNumber, index := rawdb.ReadTransaction(...)</span><br><span class="line">    ...</span><br><span class="line">    receipts, err := s.b.GetReceipts(ctx, blockHash)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> receipt.ContractAddress != (common.Address{}) {</span><br><span class="line">        fields[<span class="string">&quot;contractAddress&quot;</span>] = receipt.ContractAddress</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> fields, <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>景州牧上任表</title>
      <link href="/2018/04/05/%E6%99%AF%E5%B7%9E%E7%89%A7%E4%B8%8A%E4%BB%BB%E8%A1%A8/"/>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/05/hello-world/"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
